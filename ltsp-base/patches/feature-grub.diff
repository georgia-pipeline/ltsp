diff --git a/server/ltsp-update-kernels b/server/ltsp-update-kernels
index 9253d321..e2220942 100755
--- a/server/ltsp-update-kernels
+++ b/server/ltsp-update-kernels
@@ -13,6 +13,7 @@
 #        Oliver Grawert <ogra@canonical.com>
 #  2009, Warren Togami <wtogami@redhat.com>
 #  2012, Alkis Georgopoulos <alkisg@gmail.com>
+#  2018, Andrey Kvaps <kvapss@gmail.com>
 #
 #  This program is free software; you can redistribute it and/or
 #  modify it under the terms of the GNU General Public License as
@@ -48,6 +49,46 @@ Options:
 EOF
 }

+# List kernel versions in a descending order, while also respecting the e.g.
+#   LIST_KERNELS="generic generic-pae *"
+# order that the user may have put in $CHROOT/etc/ltsp/update-kernels.conf.
+# Distros are required to set e.g. KERNEL_PREFIX="vmlinuz-*', KERNEL_SUFFIX="".
+# The * goes where the version is expected to go.
+kernel_split() {
+    local orig_flags kernels arch loop_kernels kernel
+    # Save values of flags, and restore them later.
+    orig_flags=$(set +o)
+
+    # Disable glob expansion for this function
+    set -f
+    for kernel in $(find "$BASE/$name/boot/" -type f -name "$KERNEL_PREFIX$KERNEL_SUFFIX" -printf "%f\n"); do
+        # Validate the "arch"
+        if [ "${LIST_KERNELS}" = "ALL" ]; then
+            LIST_KERNELS="*"
+        fi
+        for arch in ${LIST_KERNELS:-*}; do
+            case "$kernel" in
+                $KERNEL_PREFIX$arch$KERNEL_SUFFIX)
+                    echo "$kernel"
+                    break 1
+                    ;;
+            esac
+        done
+    done | sed -n "$KERNEL_NAMES" | sort -k 4,4V -k 3,3rV
+
+    eval "$orig_flags"
+}
+
+kernel_versions(){
+    for arch in ${LIST_KERNELS:-"ALL"} ; do
+        LIST_KERNELS="$arch" kernel_split | awk '{print $3$4}'
+    done
+}
+
+kernel_variants(){
+    kernel_split | awk '{print $4}' | sort -u
+}
+
 trap_cleanup() {
     # Stop trapping
     trap - 0 HUP INT QUIT KILL SEGV PIPE TERM
@@ -130,6 +171,157 @@ update_kernels() {
     cleanup_kernels "$name" "$tftpboot" "$chroot"

     link_kernel_flavors "$tftpboot/$name"
+
+    # Configure grub
+    if [ -d /usr/lib/grub ]; then
+        [ -d /usr/lib/grub/i386-pc ] || echo "Skipping Grub pc bootloader installation. Install the grub-pc-bin package if you need it."
+        [ -d /usr/lib/grub/i386-efi ] || echo "Skipping Grub i386-efi bootloader installation. Install the grub-efi-ia32-bin package if you need it."
+        [ -d /usr/lib/grub/x86_64-efi ] || echo "Skipping Grub x86_64-efi bootloader installation. Install the grub-efi-amd64-bin package if you need it."
+        [ -d /usr/lib/grub/arm64-efi ] || echo "Skipping Grub arm_64-efi bootloader installation. Install the grub-efi-arm64-bin package if you need it."
+        grub-mknetdir --net-directory="$tftpdir" --subdir="$TFTP_BOOT_DIR/$name/grub" &&
+        generate_grub_config "$tftpboot/$name"
+    else
+        echo "Skipping Grub configuration. Install the grub-common package if you need it."
+    fi
+}
+
+generate_grub_config() {
+    local tftpname last_flavor file name version flavor initrd
+
+    tftpname=$1
+    if [ ! -d "$tftpname" ]; then
+        echo "Directory $tftpname does not exist"
+        return 1
+    fi
+
+    # Ensure default values for BOOT_METHODS, CMDLINE_LINUX_DEFAULTS, CMDLINE_NFS
+    # and CMDLINE_NBD. Distros *should* ship an /etc/ltsp/update-kernels.conf with
+    # appropriate values for their distro.
+    BOOT_METHODS=${BOOT_METHODS:-"NFS NBD AOE"}
+    CMDLINE_LINUX_DEFAULTS=${CMDLINE_LINUX_DEFAULTS:-"ro init=/sbin/init-ltsp"}
+    CMDLINE_NFS=${CMDLINE_NFS:-"root=/dev/nfs ip=dhcp"}
+    CMDLINE_NBD=${CMDLINE_NBD:-"root=/dev/nbd0"}
+    CMDLINE_AOE=${CMDLINE_AOE:-"root=/dev/etherd/e0.0"}
+
+    # Set a default BOOTPROMPT_OPTS using the first defined in BOOT_METHODS
+    boot_method_default=$(echo $BOOT_METHODS | awk '{print $1}')
+    cmdline_method_default=$(eval echo '$CMDLINE_'$boot_method_default)
+    BOOTPROMPT_OPTS="$CMDLINE_LINUX_DEFAULTS $cmdline_method_default"
+
+    # Those defaults should work on debian-based distros, but shouldn't hurt
+    # elsewhere because they wouldn't match actual files and they'd be ignored.
+    KERNEL_NAMES=${KERNEL_NAMES:-'s/\(vmlinu[xz]-\)\([^-]*-[^-]*-\)\(.*\)/& \1 \2 \3/p'}
+    INITRD_NAME=${INITRD_NAME:-'s/vmlinu[xz]/initrd.img/p'}
+    GRUBCFG="$tftpdir/$TFTP_BOOT_DIR/$name/grub"
+
+    # Remove all autogenerated menus.
+    rm -f $GRUBCFG/ltsp* $GRUBCFG/grub.cfg $GRUBCFG/memtest.cfg
+
+    cat > $GRUBCFG/ltsp.cfg <<EOF
+# This file is regenerated when update-kernels runs.  Do not edit
+# directly, edit the client's /etc/ltsp/update-kernels.conf instead.
+
+set timeout=${TIMEOUT:-0}
+set default=0
+
+if [ "\${grub_platform}" == efi ]; then
+    insmod efi_gop
+    insmod efi_uga
+fi
+
+regexp --set=1:m1 --set=2:m2 --set=3:m3 --set=4:m4 --set=5:m5 --set=6:m6 '^([0-9a-f]{1,2})\:([0-9a-f]{1,2})\:([0-9a-f]{1,2})\:([0-9a-f]{1,2})\:([0-9a-f]{1,2})\:([0-9a-f]{1,2})' "\$net_default_mac"
+bootif=\${m1}-\${m2}-\${m3}-\${m4}-\${m5}-\${m6}
+
+EOF
+
+    grub_include_files=""
+    for method in $BOOT_METHODS ; do
+        grub_include_files="$grub_include_files ltsp-$method"
+        # Get the preferred default kernel, preferred 32-bit kernel, or any
+        # kernel.
+        version=$(LIST_KERNELS="$LIST_KERNELS_DEFAULT $LIST_KERNELS_32 ALL" kernel_versions | head -n 1)
+    	cat > $GRUBCFG/ltsp-$method.cfg <<EOF
+# This file is regenerated when update-kernels runs.
+# Do not edit, see /etc/ltsp/update-kernels.conf instead.
+
+menuentry "LTSP, using $method" --class os {
+     echo "Loading Linux..."
+     linux /$TFTP_BOOT_DIR/$name/vmlinuz${version:+-"$version"} ro $CMDLINE_LINUX_DEFAULT $(eval echo '$CMDLINE_'$method) BOOTIF=\${bootif}
+     echo "Loading initial ramdisk..."
+     initrd /$TFTP_BOOT_DIR/$name/initrd.img${version:+-"$version"}
+}
+
+EOF
+
+    done
+
+
+    # Add entries for each kernel and boot method,
+    # Which needs a corresponding CMDLINE_ for each defined method.
+    # i.e. CMDLINE_NFS or CMDLINE_NBD
+    # Also requires that CMDLINE_LINUX_DEFAULT is set to a sane value.
+    kversions=$(kernel_versions)
+    if [ -n "$kversions" ]; then
+        for method in $BOOT_METHODS ; do
+            grub_include_files="$grub_include_files ltsp-versions-$method"
+            cat > $GRUBCFG/ltsp-versions-$method.cfg <<EOF
+# This file is regenerated when update-kernels runs.
+# Do not edit, see /etc/ltsp/update-kernels.conf instead.
+
+submenu "Other LTSP boot options using $method" {
+
+EOF
+            for version in $kversions ; do
+                cat >> $GRUBCFG/ltsp-versions-$method.cfg <<EOF
+    menuentry "LTSP, using $method, with Linux $version" --class os {
+         echo "Loading Linux..."
+         linux /$TFTP_BOOT_DIR/$name/vmlinuz-$version ro $CMDLINE_LINUX_DEFAULT $(eval echo '$CMDLINE_'$method) BOOTIF=\${bootif}
+         echo "Loading initial ramdisk..."
+         initrd /$TFTP_BOOT_DIR/$name/initrd.img-$version
+    }
+
+EOF
+            done
+            cat >> $GRUBCFG/ltsp-versions-$method.cfg <<EOF
+    menuentry "Return to main menu" {
+        menuinteractive=yes
+        configfile "/$TFTP_BOOT_DIR/$name/grub/ltsp.cfg"
+    }
+
+}
+
+EOF
+        done
+    fi
+
+    if [ -f "/$tftpdir/$TFTP_BOOT_DIR/$name/memtest86+.bin" ]; then
+        grub_include_files="$grub_include_files memtest"
+        cat > $GRUBCFG/memtest.cfg <<EOF
+# This file is regenerated when update-kernels runs.
+# Do not edit, see /etc/ltsp/update-kernels.conf instead.
+
+if [ "\${grub_platform}" != efi ]; then
+    menuentry "Memory test" {
+        linux16 "/$TFTP_BOOT_DIR/$name/memtest86+.bin"
+    }
+fi
+
+EOF
+    fi
+
+
+    for file in $grub_include_files ; do
+        if [ -f "$GRUBCFG/$file.cfg" ]; then
+            cat "$GRUBCFG/$file.cfg" >> $GRUBCFG/ltsp.cfg
+        fi
+    done
+    ln -sf "ltsp.cfg" "$GRUBCFG/grub.cfg"
+
+    # link lts.conf
+    for dir in i386-pc x86_64-efi i386-efi arm64-efi; do
+        mkdir -p "$GRUBCFG/$dir"
+        ln -sf "../../lts.conf" "$GRUBCFG/$dir/lts.conf"
+    done
+
 }

 # Create symlinks for each kernel flavor in the tftp dir.
